Parameters:
  DockerImage:
    Default: <AWS Account ID>.dkr.ecr.<AWS REGION>.amazonaws.com/<ECR REPO>:<VERSION>
    Description: Location of docker image to deploy
    Type: String
  VpcCIDR: 
    Description: IP Range for VPC in CIDR notation
    Type: String
    Default: 10.50.0.0/16
  PublicSubnet1CIDR:
    Description: IP Range of first public AZ within new VPC in CIDR format
    Type: String
    Default: 10.50.1.0/24
  PublicSubnet2CIDR:
    Description: IP Range of second public AZ within new VPC in CIDR format
    Type: String
    Default: 10.50.2.0/24
Resources:
  Cluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: webapp
  Service: 
    Type: AWS::ECS::Service
    Properties: 
      Cluster: !Ref Cluster
      ServiceName: loadgen-root
      LaunchType: FARGATE
      DesiredCount: 0
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
           - !Ref InstanceSecurityGroupWebApp
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2                                            
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      ExecutionRoleArn: !Ref ServiceRole
      ContainerDefinitions:
        - Name: webapp
          Essential: true
          Image: !Ref DockerImage
          EntryPoint: 
            - /webapp
          Environment:
            - Name: RedisEndpoint
              Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
            - Name: RedisPort
              Value: 6379                      
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: webapp
  ServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: ecs-webapp-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ["ecs-tasks.amazonaws.com"]
          Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*' 
  LogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupPublic
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP 
  TargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: webapp-target-group
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      TargetType: ip     
  SubnetGroupaRedis:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Subnet Group for Example Replication Group
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  InstanceSecurityGroupWebApp:
    Properties:
      GroupDescription: Web Instance Security Group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'        
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup        
  InstanceSecurityGroupRedis:
    Properties:
      GroupDescription: Web Instance Security Group
      SecurityGroupIngress:
      - CidrIp: 10.194.0.0/16
        FromPort: '6379'
        IpProtocol: tcp
        ToPort: '6379'    
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup
  ElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup    
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: "true"
      Engine: "redis"
      CacheNodeType: "cache.t2.micro"
      CacheSubnetGroupName: !Ref ElasticacheSubnetGroup
      NumCacheNodes: "1"
      VpcSecurityGroupIds:
        - !Ref InstanceSecurityGroupRedis         
Outputs:
  ElastiCacheAddress:
    Description: ElastiCache endpoint address
    Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
  ElastiCachePort:
    Description: ElastiCache port
    Value: 6379
  WebAppAddress:
    Description: Public ELB Host
    Value: !GetAtt PublicLoadBalancer.DNSName

  